from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from db import save_lead, get_all_leads, clear_old_data
from config import ADMIN_ID

router = Router()
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–≤–æ–π Telegram ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)

@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ò–º—è\n–¢–µ–ª–µ—Ñ–æ–Ω\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    )


@router.message(Command("showdb"))
async def show_db(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    if int(message.from_user.id) != int(ADMIN_ID):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    leads = get_all_leads()
    if not leads:
        await message.answer("üì≠ –ë–∞–∑–∞ –ø—É—Å—Ç–∞.")
        return

    text = "\n\n".join(
        [f"{i+1}. {l['name']} ‚Äî {l['phone']}\n{l['message']}" for i, l in enumerate(leads[-10:])]
    )
    await message.answer(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n{text}")

@router.message(Command("cleardb"))
async def clear_db(message: Message):
    if int(message.from_user.id) != int(ADMIN_ID):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    from db import clear_old_data
    count = clear_old_data(days=30)
    await message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞—è–≤–æ–∫ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π.")



@router.message(F.text)
async def handle_message(message: Message):
    text = message.text.strip()
    parts = text.split("\n")

    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.\n–ü—Ä–∏–º–µ—Ä:\n\n–ò–≤–∞–Ω\n+49123456789\n–•–æ—á—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
        return

    name = parts[0]
    phone = parts[1]
    msg = "\n".join(parts[2:]) if len(parts) > 2 else "-"

    save_lead(name, phone, msg)
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π.")
