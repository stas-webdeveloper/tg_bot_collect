from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db import save_lead, get_all_leads, clear_old_data
from config import ADMIN_ID

router = Router()

class LeadStates(StatesGroup):
    AWAITING_NAME = State()
    AWAITING_PHONE = State()
    AWAITING_COMMENT = State()

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(LeadStates.AWAITING_NAME)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

@router.message(LeadStates.AWAITING_NAME)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await state.set_state(LeadStates.AWAITING_PHONE)
    await message.answer("üì± –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")

@router.message(LeadStates.AWAITING_PHONE)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)
    await state.set_state(LeadStates.AWAITING_COMMENT)
    await message.answer("üí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è):")

@router.message(LeadStates.AWAITING_COMMENT)
async def process_comment(message: Message, state: FSMContext):
    comment = message.text.strip() if message.text.strip() != "-" else "-"
    user_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    save_lead(user_data['name'], user_data['phone'], comment)

    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        f"üë§ –ò–º—è: {user_data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
        f"–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!"
    )

    await state.clear()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.message(Command("showdb"))
async def show_db(message: Message):
    if int(message.from_user.id) != int(ADMIN_ID):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    leads = get_all_leads()
    if not leads:
        await message.answer("üì≠ –ë–∞–∑–∞ –ø—É—Å—Ç–∞.")
        return

    text = "\n\n".join(
        [f"{i+1}. {l['name']} ‚Äî {l['phone']}\n{l['message']}" for i, l in enumerate(leads[-10:])]
    )
    await message.answer(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n{text}")

@router.message(Command("cleardb"))
async def clear_db(message: Message):
    if int(message.from_user.id) != int(ADMIN_ID):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    count = clear_old_data(days=30)
    await message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞—è–≤–æ–∫ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π.")
